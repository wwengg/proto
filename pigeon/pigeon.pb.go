// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pigeon/pigeon.proto

package pigeon

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	client "github.com/smallnest/rpcx/client"
	protocol "github.com/smallnest/rpcx/protocol"
	server "github.com/smallnest/rpcx/server"
	common "github.com/wwengg/proto/common"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type PushMsgByUserArgs struct {
	UId                  int64    `protobuf:"varint,1,opt,name=uId,proto3" json:"uId,omitempty"`
	Op                   uint32   `protobuf:"varint,2,opt,name=op,proto3" json:"op,omitempty"`
	Proto                *Proto   `protobuf:"bytes,3,opt,name=proto,proto3" json:"proto,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PushMsgByUserArgs) Reset()         { *m = PushMsgByUserArgs{} }
func (m *PushMsgByUserArgs) String() string { return proto.CompactTextString(m) }
func (*PushMsgByUserArgs) ProtoMessage()    {}
func (*PushMsgByUserArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_94ac1efd7530e7d2, []int{0}
}

func (m *PushMsgByUserArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PushMsgByUserArgs.Unmarshal(m, b)
}
func (m *PushMsgByUserArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PushMsgByUserArgs.Marshal(b, m, deterministic)
}
func (m *PushMsgByUserArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushMsgByUserArgs.Merge(m, src)
}
func (m *PushMsgByUserArgs) XXX_Size() int {
	return xxx_messageInfo_PushMsgByUserArgs.Size(m)
}
func (m *PushMsgByUserArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_PushMsgByUserArgs.DiscardUnknown(m)
}

var xxx_messageInfo_PushMsgByUserArgs proto.InternalMessageInfo

func (m *PushMsgByUserArgs) GetUId() int64 {
	if m != nil {
		return m.UId
	}
	return 0
}

func (m *PushMsgByUserArgs) GetOp() uint32 {
	if m != nil {
		return m.Op
	}
	return 0
}

func (m *PushMsgByUserArgs) GetProto() *Proto {
	if m != nil {
		return m.Proto
	}
	return nil
}

type PushMsgByRoomArgs struct {
	RId                  int64    `protobuf:"varint,1,opt,name=rId,proto3" json:"rId,omitempty"`
	Op                   uint32   `protobuf:"varint,2,opt,name=op,proto3" json:"op,omitempty"`
	Proto                *Proto   `protobuf:"bytes,3,opt,name=proto,proto3" json:"proto,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PushMsgByRoomArgs) Reset()         { *m = PushMsgByRoomArgs{} }
func (m *PushMsgByRoomArgs) String() string { return proto.CompactTextString(m) }
func (*PushMsgByRoomArgs) ProtoMessage()    {}
func (*PushMsgByRoomArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_94ac1efd7530e7d2, []int{1}
}

func (m *PushMsgByRoomArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PushMsgByRoomArgs.Unmarshal(m, b)
}
func (m *PushMsgByRoomArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PushMsgByRoomArgs.Marshal(b, m, deterministic)
}
func (m *PushMsgByRoomArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushMsgByRoomArgs.Merge(m, src)
}
func (m *PushMsgByRoomArgs) XXX_Size() int {
	return xxx_messageInfo_PushMsgByRoomArgs.Size(m)
}
func (m *PushMsgByRoomArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_PushMsgByRoomArgs.DiscardUnknown(m)
}

var xxx_messageInfo_PushMsgByRoomArgs proto.InternalMessageInfo

func (m *PushMsgByRoomArgs) GetRId() int64 {
	if m != nil {
		return m.RId
	}
	return 0
}

func (m *PushMsgByRoomArgs) GetOp() uint32 {
	if m != nil {
		return m.Op
	}
	return 0
}

func (m *PushMsgByRoomArgs) GetProto() *Proto {
	if m != nil {
		return m.Proto
	}
	return nil
}

type PushMsgByClientArgs struct {
	CId                  uint64   `protobuf:"varint,1,opt,name=cId,proto3" json:"cId,omitempty"`
	Op                   uint32   `protobuf:"varint,2,opt,name=op,proto3" json:"op,omitempty"`
	Proto                *Proto   `protobuf:"bytes,3,opt,name=proto,proto3" json:"proto,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PushMsgByClientArgs) Reset()         { *m = PushMsgByClientArgs{} }
func (m *PushMsgByClientArgs) String() string { return proto.CompactTextString(m) }
func (*PushMsgByClientArgs) ProtoMessage()    {}
func (*PushMsgByClientArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_94ac1efd7530e7d2, []int{2}
}

func (m *PushMsgByClientArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PushMsgByClientArgs.Unmarshal(m, b)
}
func (m *PushMsgByClientArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PushMsgByClientArgs.Marshal(b, m, deterministic)
}
func (m *PushMsgByClientArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PushMsgByClientArgs.Merge(m, src)
}
func (m *PushMsgByClientArgs) XXX_Size() int {
	return xxx_messageInfo_PushMsgByClientArgs.Size(m)
}
func (m *PushMsgByClientArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_PushMsgByClientArgs.DiscardUnknown(m)
}

var xxx_messageInfo_PushMsgByClientArgs proto.InternalMessageInfo

func (m *PushMsgByClientArgs) GetCId() uint64 {
	if m != nil {
		return m.CId
	}
	return 0
}

func (m *PushMsgByClientArgs) GetOp() uint32 {
	if m != nil {
		return m.Op
	}
	return 0
}

func (m *PushMsgByClientArgs) GetProto() *Proto {
	if m != nil {
		return m.Proto
	}
	return nil
}

type BroadcastArgs struct {
	Op                   uint32   `protobuf:"varint,1,opt,name=op,proto3" json:"op,omitempty"`
	Proto                *Proto   `protobuf:"bytes,2,opt,name=proto,proto3" json:"proto,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *BroadcastArgs) Reset()         { *m = BroadcastArgs{} }
func (m *BroadcastArgs) String() string { return proto.CompactTextString(m) }
func (*BroadcastArgs) ProtoMessage()    {}
func (*BroadcastArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_94ac1efd7530e7d2, []int{3}
}

func (m *BroadcastArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_BroadcastArgs.Unmarshal(m, b)
}
func (m *BroadcastArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_BroadcastArgs.Marshal(b, m, deterministic)
}
func (m *BroadcastArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BroadcastArgs.Merge(m, src)
}
func (m *BroadcastArgs) XXX_Size() int {
	return xxx_messageInfo_BroadcastArgs.Size(m)
}
func (m *BroadcastArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_BroadcastArgs.DiscardUnknown(m)
}

var xxx_messageInfo_BroadcastArgs proto.InternalMessageInfo

func (m *BroadcastArgs) GetOp() uint32 {
	if m != nil {
		return m.Op
	}
	return 0
}

func (m *BroadcastArgs) GetProto() *Proto {
	if m != nil {
		return m.Proto
	}
	return nil
}

func init() {
	proto.RegisterType((*PushMsgByUserArgs)(nil), "proto.pigeon.PushMsgByUserArgs")
	proto.RegisterType((*PushMsgByRoomArgs)(nil), "proto.pigeon.PushMsgByRoomArgs")
	proto.RegisterType((*PushMsgByClientArgs)(nil), "proto.pigeon.PushMsgByClientArgs")
	proto.RegisterType((*BroadcastArgs)(nil), "proto.pigeon.BroadcastArgs")
}

func init() {
	proto.RegisterFile("pigeon/pigeon.proto", fileDescriptor_94ac1efd7530e7d2)
}

var fileDescriptor_94ac1efd7530e7d2 = []byte{
	// 317 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x93, 0xd1, 0x4b, 0x83, 0x50,
	0x14, 0xc6, 0xd3, 0xb5, 0xa0, 0x53, 0x56, 0xbb, 0x63, 0x20, 0x06, 0x65, 0x7b, 0x12, 0x02, 0x85,
	0xf5, 0xdc, 0x43, 0xc6, 0x1e, 0x06, 0x05, 0x62, 0xf4, 0xd2, 0xdb, 0xd4, 0xcb, 0x9d, 0x30, 0x3d,
	0x72, 0xd5, 0x46, 0x7f, 0x51, 0xff, 0x66, 0x5c, 0xaf, 0x6e, 0x99, 0x8e, 0x1e, 0xf6, 0x74, 0xce,
	0x3d, 0xdc, 0xf3, 0xfb, 0xe4, 0xfb, 0xbc, 0x30, 0xce, 0x62, 0x46, 0x31, 0x75, 0x64, 0xb1, 0x33,
	0x8e, 0x05, 0x92, 0xf3, 0xaa, 0xd8, 0x72, 0x66, 0x8c, 0x43, 0x4c, 0x12, 0x4c, 0x1d, 0x59, 0xe4,
	0x15, 0x63, 0xd2, 0xec, 0x89, 0x53, 0x88, 0x6b, 0x39, 0x9e, 0x06, 0x30, 0xf2, 0xca, 0x7c, 0xf5,
	0x9a, 0x33, 0xf7, 0xeb, 0x3d, 0xa7, 0xfc, 0x89, 0xb3, 0x9c, 0x5c, 0xc1, 0xa0, 0x5c, 0x44, 0xba,
	0x62, 0x2a, 0xd6, 0xc0, 0x17, 0x2d, 0xb9, 0x00, 0x15, 0x33, 0x5d, 0x35, 0x15, 0x4b, 0xf3, 0x55,
	0xcc, 0xc8, 0x3d, 0x0c, 0xab, 0x7d, 0x7d, 0x60, 0x2a, 0xd6, 0xd9, 0x6c, 0x62, 0xd7, 0x1f, 0xd0,
	0xc0, 0x3d, 0xd1, 0xf8, 0xc3, 0xae, 0x86, 0x8f, 0x98, 0x34, 0x1a, 0x7c, 0xa7, 0xc1, 0x0f, 0xd5,
	0x88, 0x60, 0xbc, 0xd5, 0x78, 0x5e, 0xc7, 0x34, 0x2d, 0x1a, 0x95, 0xb0, 0x56, 0x39, 0xf6, 0x45,
	0x7b, 0x98, 0xca, 0x0b, 0x68, 0x2e, 0xc7, 0x65, 0x14, 0x2e, 0x73, 0xc9, 0x97, 0x34, 0xa5, 0x4b,
	0x53, 0xff, 0xa7, 0xcd, 0xbe, 0x55, 0xd0, 0xbc, 0x2a, 0x95, 0x37, 0xca, 0x3f, 0xe3, 0x90, 0x92,
	0x39, 0x68, 0xad, 0x34, 0xc8, 0xad, 0xfd, 0x3b, 0x59, 0xbb, 0x13, 0x95, 0x31, 0xaa, 0x2f, 0xd4,
	0x59, 0xcf, 0x39, 0x9f, 0x1e, 0xb5, 0x30, 0xc2, 0xf0, 0xbd, 0x98, 0x26, 0x8d, 0x7e, 0xcc, 0x02,
	0x2e, 0xff, 0x78, 0x4a, 0xee, 0xf6, 0x80, 0x76, 0x96, 0xf7, 0xa3, 0x1e, 0xe1, 0x74, 0x6b, 0x1c,
	0xb9, 0x6e, 0x43, 0x5a, 0x8e, 0xf6, 0xae, 0xbb, 0xe6, 0xc7, 0x0d, 0x8b, 0x8b, 0x55, 0x19, 0x88,
	0xb1, 0xb3, 0xd9, 0xd0, 0x94, 0x31, 0xf9, 0x27, 0xd7, 0xef, 0x20, 0x38, 0xa9, 0x4e, 0x0f, 0x3f,
	0x01, 0x00, 0x00, 0xff, 0xff, 0x04, 0x53, 0x25, 0x3b, 0x1f, 0x03, 0x00, 0x00,
}

// This following code was generated by rpcx
// Gernerated from pigeon/pigeon.proto

//================== interface skeleton ===================
type PigeonServiceAble interface {
	// PigeonServiceAble can be used for interface verification.

	// PushMsgByUser is server rpc method as defined
	PushMsgByUser(ctx context.Context, args *PushMsgByUserArgs, reply *common.Err) (err error)

	// PushMsgByRoom is server rpc method as defined
	PushMsgByRoom(ctx context.Context, args *PushMsgByRoomArgs, reply *common.Err) (err error)

	// PushMsgByClient is server rpc method as defined
	PushMsgByClient(ctx context.Context, args *PushMsgByClientArgs, reply *common.Err) (err error)

	// Broadcast is server rpc method as defined
	Broadcast(ctx context.Context, args *BroadcastArgs, reply *common.Err) (err error)
}

//================== server skeleton ===================
type PigeonServiceImpl struct{}

// ServeForPigeonService starts a server only registers one service.
// You can register more services and only start one server.
// It blocks until the application exits.
func ServeForPigeonService(addr string) error {
	s := server.NewServer()
	s.RegisterName("PigeonService", new(PigeonServiceImpl), "")
	return s.Serve("tcp", addr)
}

// PushMsgByUser is server rpc method as defined
func (s *PigeonServiceImpl) PushMsgByUser(ctx context.Context, args *PushMsgByUserArgs, reply *common.Err) (err error) {
	// TODO: add business logics

	// TODO: setting return values
	*reply = common.Err{}

	return nil
}

// PushMsgByRoom is server rpc method as defined
func (s *PigeonServiceImpl) PushMsgByRoom(ctx context.Context, args *PushMsgByRoomArgs, reply *common.Err) (err error) {
	// TODO: add business logics

	// TODO: setting return values
	*reply = common.Err{}

	return nil
}

// PushMsgByClient is server rpc method as defined
func (s *PigeonServiceImpl) PushMsgByClient(ctx context.Context, args *PushMsgByClientArgs, reply *common.Err) (err error) {
	// TODO: add business logics

	// TODO: setting return values
	*reply = common.Err{}

	return nil
}

// Broadcast is server rpc method as defined
func (s *PigeonServiceImpl) Broadcast(ctx context.Context, args *BroadcastArgs, reply *common.Err) (err error) {
	// TODO: add business logics

	// TODO: setting return values
	*reply = common.Err{}

	return nil
}

//================== client stub ===================
// PigeonService is a client wrapped XClient.
type PigeonServiceClient struct {
	xclient client.XClient
}

// NewPigeonServiceClient wraps a XClient as PigeonServiceClient.
// You can pass a shared XClient object created by NewXClientForPigeonService.
func NewPigeonServiceClient(xclient client.XClient) *PigeonServiceClient {
	return &PigeonServiceClient{xclient: xclient}
}

// NewXClientForPigeonService creates a XClient.
// You can configure this client with more options such as etcd registry, serialize type, select algorithm and fail mode.
func NewXClientForPigeonService(addr string) (client.XClient, error) {
	d, err := client.NewPeer2PeerDiscovery("tcp@"+addr, "")
	if err != nil {
		return nil, err
	}

	opt := client.DefaultOption
	opt.SerializeType = protocol.ProtoBuffer

	xclient := client.NewXClient("PigeonService", client.Failtry, client.RoundRobin, d, opt)

	return xclient, nil
}

// PushMsgByUser is client rpc method as defined
func (c *PigeonServiceClient) PushMsgByUser(ctx context.Context, args *PushMsgByUserArgs) (reply *common.Err, err error) {
	reply = &common.Err{}
	err = c.xclient.Call(ctx, "PushMsgByUser", args, reply)
	return reply, err
}

// PushMsgByRoom is client rpc method as defined
func (c *PigeonServiceClient) PushMsgByRoom(ctx context.Context, args *PushMsgByRoomArgs) (reply *common.Err, err error) {
	reply = &common.Err{}
	err = c.xclient.Call(ctx, "PushMsgByRoom", args, reply)
	return reply, err
}

// PushMsgByClient is client rpc method as defined
func (c *PigeonServiceClient) PushMsgByClient(ctx context.Context, args *PushMsgByClientArgs) (reply *common.Err, err error) {
	reply = &common.Err{}
	err = c.xclient.Call(ctx, "PushMsgByClient", args, reply)
	return reply, err
}

// Broadcast is client rpc method as defined
func (c *PigeonServiceClient) Broadcast(ctx context.Context, args *BroadcastArgs) (reply *common.Err, err error) {
	reply = &common.Err{}
	err = c.xclient.Call(ctx, "Broadcast", args, reply)
	return reply, err
}

//================== oneclient stub ===================
// PigeonServiceOneClient is a client wrapped oneClient.
type PigeonServiceOneClient struct {
	serviceName string
	oneclient   client.OneClient
}

// NewPigeonServiceOneClient wraps a OneClient as PigeonServiceOneClient.
// You can pass a shared OneClient object created by NewOneClientForPigeonService.
func NewPigeonServiceOneClient(oneclient client.OneClient) *PigeonServiceOneClient {
	return &PigeonServiceOneClient{
		serviceName: "PigeonService",
		oneclient:   oneclient,
	}
}

// ======================================================

// PushMsgByUser is client rpc method as defined
func (c *PigeonServiceOneClient) PushMsgByUser(ctx context.Context, args *PushMsgByUserArgs) (reply *common.Err, err error) {
	reply = &common.Err{}
	err = c.oneclient.Call(ctx, c.serviceName, "PushMsgByUser", args, reply)
	return reply, err
}

// PushMsgByRoom is client rpc method as defined
func (c *PigeonServiceOneClient) PushMsgByRoom(ctx context.Context, args *PushMsgByRoomArgs) (reply *common.Err, err error) {
	reply = &common.Err{}
	err = c.oneclient.Call(ctx, c.serviceName, "PushMsgByRoom", args, reply)
	return reply, err
}

// PushMsgByClient is client rpc method as defined
func (c *PigeonServiceOneClient) PushMsgByClient(ctx context.Context, args *PushMsgByClientArgs) (reply *common.Err, err error) {
	reply = &common.Err{}
	err = c.oneclient.Call(ctx, c.serviceName, "PushMsgByClient", args, reply)
	return reply, err
}

// Broadcast is client rpc method as defined
func (c *PigeonServiceOneClient) Broadcast(ctx context.Context, args *BroadcastArgs) (reply *common.Err, err error) {
	reply = &common.Err{}
	err = c.oneclient.Call(ctx, c.serviceName, "Broadcast", args, reply)
	return reply, err
}
