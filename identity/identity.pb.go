// Code generated by protoc-gen-go. DO NOT EDIT.
// source: identity/identity.proto

package identity

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	client "github.com/smallnest/rpcx/client"
	protocol "github.com/smallnest/rpcx/protocol"
	server "github.com/smallnest/rpcx/server"
	common "github.com/wwengg/proto/common"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GetIdReply struct {
	Id                   int64    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetIdReply) Reset()         { *m = GetIdReply{} }
func (m *GetIdReply) String() string { return proto.CompactTextString(m) }
func (*GetIdReply) ProtoMessage()    {}
func (*GetIdReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_2433c1f46177a3e0, []int{0}
}

func (m *GetIdReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetIdReply.Unmarshal(m, b)
}
func (m *GetIdReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetIdReply.Marshal(b, m, deterministic)
}
func (m *GetIdReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetIdReply.Merge(m, src)
}
func (m *GetIdReply) XXX_Size() int {
	return xxx_messageInfo_GetIdReply.Size(m)
}
func (m *GetIdReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetIdReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetIdReply proto.InternalMessageInfo

func (m *GetIdReply) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

type GetIdsArgs struct {
	Num                  int32    `protobuf:"varint,1,opt,name=num,proto3" json:"num,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetIdsArgs) Reset()         { *m = GetIdsArgs{} }
func (m *GetIdsArgs) String() string { return proto.CompactTextString(m) }
func (*GetIdsArgs) ProtoMessage()    {}
func (*GetIdsArgs) Descriptor() ([]byte, []int) {
	return fileDescriptor_2433c1f46177a3e0, []int{1}
}

func (m *GetIdsArgs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetIdsArgs.Unmarshal(m, b)
}
func (m *GetIdsArgs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetIdsArgs.Marshal(b, m, deterministic)
}
func (m *GetIdsArgs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetIdsArgs.Merge(m, src)
}
func (m *GetIdsArgs) XXX_Size() int {
	return xxx_messageInfo_GetIdsArgs.Size(m)
}
func (m *GetIdsArgs) XXX_DiscardUnknown() {
	xxx_messageInfo_GetIdsArgs.DiscardUnknown(m)
}

var xxx_messageInfo_GetIdsArgs proto.InternalMessageInfo

func (m *GetIdsArgs) GetNum() int32 {
	if m != nil {
		return m.Num
	}
	return 0
}

type GetIdsReply struct {
	Ids                  []int64  `protobuf:"varint,1,rep,packed,name=ids,proto3" json:"ids,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetIdsReply) Reset()         { *m = GetIdsReply{} }
func (m *GetIdsReply) String() string { return proto.CompactTextString(m) }
func (*GetIdsReply) ProtoMessage()    {}
func (*GetIdsReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_2433c1f46177a3e0, []int{2}
}

func (m *GetIdsReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GetIdsReply.Unmarshal(m, b)
}
func (m *GetIdsReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GetIdsReply.Marshal(b, m, deterministic)
}
func (m *GetIdsReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetIdsReply.Merge(m, src)
}
func (m *GetIdsReply) XXX_Size() int {
	return xxx_messageInfo_GetIdsReply.Size(m)
}
func (m *GetIdsReply) XXX_DiscardUnknown() {
	xxx_messageInfo_GetIdsReply.DiscardUnknown(m)
}

var xxx_messageInfo_GetIdsReply proto.InternalMessageInfo

func (m *GetIdsReply) GetIds() []int64 {
	if m != nil {
		return m.Ids
	}
	return nil
}

func init() {
	proto.RegisterType((*GetIdReply)(nil), "proto.identity.GetIdReply")
	proto.RegisterType((*GetIdsArgs)(nil), "proto.identity.GetIdsArgs")
	proto.RegisterType((*GetIdsReply)(nil), "proto.identity.GetIdsReply")
}

func init() {
	proto.RegisterFile("identity/identity.proto", fileDescriptor_2433c1f46177a3e0)
}

var fileDescriptor_2433c1f46177a3e0 = []byte{
	// 220 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0xcf, 0x4c, 0x49, 0xcd,
	0x2b, 0xc9, 0x2c, 0xa9, 0xd4, 0x87, 0x31, 0xf4, 0x0a, 0x8a, 0xf2, 0x4b, 0xf2, 0x85, 0xf8, 0xc0,
	0x94, 0x1e, 0x4c, 0x54, 0x4a, 0x38, 0x39, 0x3f, 0x37, 0x37, 0x3f, 0x4f, 0x1f, 0x42, 0x41, 0x14,
	0x29, 0xc9, 0x70, 0x71, 0xb9, 0xa7, 0x96, 0x78, 0xa6, 0x04, 0xa5, 0x16, 0xe4, 0x54, 0x0a, 0xf1,
	0x71, 0x31, 0x65, 0xa6, 0x48, 0x30, 0x2a, 0x30, 0x6a, 0x30, 0x07, 0x31, 0x65, 0xa6, 0x28, 0xc9,
	0x41, 0x65, 0x8b, 0x1d, 0x8b, 0xd2, 0x8b, 0x85, 0x04, 0xb8, 0x98, 0xf3, 0x4a, 0x73, 0xc1, 0xd2,
	0xac, 0x41, 0x20, 0xa6, 0x92, 0x3c, 0x17, 0x37, 0x44, 0x1e, 0xa2, 0x5d, 0x80, 0x8b, 0x39, 0x33,
	0xa5, 0x58, 0x82, 0x51, 0x81, 0x59, 0x83, 0x39, 0x08, 0xc4, 0x34, 0xea, 0x66, 0xe4, 0xe2, 0xf0,
	0x84, 0x3a, 0x40, 0xc8, 0x8a, 0x8b, 0x15, 0xac, 0x5a, 0x48, 0x18, 0x62, 0xb9, 0x1e, 0xd4, 0x25,
	0xae, 0xb9, 0x05, 0x25, 0x95, 0x52, 0x52, 0x7a, 0xa8, 0xee, 0xd5, 0x43, 0xb8, 0x4b, 0x89, 0x41,
	0xc8, 0x99, 0x8b, 0x0d, 0x62, 0x93, 0x10, 0x76, 0x75, 0x60, 0x17, 0x4a, 0x49, 0x63, 0x97, 0x83,
	0x1a, 0xe2, 0xa4, 0x14, 0xa5, 0x90, 0x9e, 0x59, 0x92, 0x51, 0x9a, 0x04, 0xb2, 0x59, 0xbf, 0xbc,
	0x3c, 0x35, 0x2f, 0x3d, 0x5d, 0x1f, 0xac, 0x03, 0x1e, 0x76, 0x49, 0x6c, 0x60, 0xbe, 0x31, 0x20,
	0x00, 0x00, 0xff, 0xff, 0x8a, 0xed, 0xdb, 0x55, 0x57, 0x01, 0x00, 0x00,
}

// This following code was generated by rpcx
// Gernerated from identity/identity.proto

//================== interface skeleton ===================
type IdentityAble interface {
	// IdentityAble can be used for interface verification.

	// GetId is server rpc method as defined
	GetId(ctx context.Context, args *common.Empty, reply *GetIdReply) (err error)

	// GetIds is server rpc method as defined
	GetIds(ctx context.Context, args *GetIdsArgs, reply *GetIdsReply) (err error)
}

//================== server skeleton ===================
type IdentityImpl struct{}

// ServeForIdentity starts a server only registers one service.
// You can register more services and only start one server.
// It blocks until the application exits.
func ServeForIdentity(addr string) error {
	s := server.NewServer()
	s.RegisterName("Identity", new(IdentityImpl), "")
	return s.Serve("tcp", addr)
}

// GetId is server rpc method as defined
func (s *IdentityImpl) GetId(ctx context.Context, args *common.Empty, reply *GetIdReply) (err error) {
	// TODO: add business logics

	// TODO: setting return values
	*reply = GetIdReply{}

	return nil
}

// GetIds is server rpc method as defined
func (s *IdentityImpl) GetIds(ctx context.Context, args *GetIdsArgs, reply *GetIdsReply) (err error) {
	// TODO: add business logics

	// TODO: setting return values
	*reply = GetIdsReply{}

	return nil
}

//================== client stub ===================
// Identity is a client wrapped XClient.
type IdentityClient struct {
	xclient client.XClient
}

// NewIdentityClient wraps a XClient as IdentityClient.
// You can pass a shared XClient object created by NewXClientForIdentity.
func NewIdentityClient(xclient client.XClient) *IdentityClient {
	return &IdentityClient{xclient: xclient}
}

// NewXClientForIdentity creates a XClient.
// You can configure this client with more options such as etcd registry, serialize type, select algorithm and fail mode.
func NewXClientForIdentity(addr string) (client.XClient, error) {
	d, err := client.NewPeer2PeerDiscovery("tcp@"+addr, "")
	if err != nil {
		return nil, err
	}

	opt := client.DefaultOption
	opt.SerializeType = protocol.ProtoBuffer

	xclient := client.NewXClient("Identity", client.Failtry, client.RoundRobin, d, opt)

	return xclient, nil
}

// GetId is client rpc method as defined
func (c *IdentityClient) GetId(ctx context.Context, args *common.Empty) (reply *GetIdReply, err error) {
	reply = &GetIdReply{}
	err = c.xclient.Call(ctx, "GetId", args, reply)
	return reply, err
}

// GetIds is client rpc method as defined
func (c *IdentityClient) GetIds(ctx context.Context, args *GetIdsArgs) (reply *GetIdsReply, err error) {
	reply = &GetIdsReply{}
	err = c.xclient.Call(ctx, "GetIds", args, reply)
	return reply, err
}

//================== oneclient stub ===================
// IdentityOneClient is a client wrapped oneClient.
type IdentityOneClient struct {
	serviceName string
	oneclient   client.OneClient
}

// NewIdentityOneClient wraps a OneClient as IdentityOneClient.
// You can pass a shared OneClient object created by NewOneClientForIdentity.
func NewIdentityOneClient(oneclient client.OneClient) *IdentityOneClient {
	return &IdentityOneClient{
		serviceName: "Identity",
		oneclient:   oneclient,
	}
}

// ======================================================

// GetId is client rpc method as defined
func (c *IdentityOneClient) GetId(ctx context.Context, args *common.Empty) (reply *GetIdReply, err error) {
	reply = &GetIdReply{}
	err = c.oneclient.Call(ctx, c.serviceName, "GetId", args, reply)
	return reply, err
}

// GetIds is client rpc method as defined
func (c *IdentityOneClient) GetIds(ctx context.Context, args *GetIdsArgs) (reply *GetIdsReply, err error) {
	reply = &GetIdsReply{}
	err = c.oneclient.Call(ctx, c.serviceName, "GetIds", args, reply)
	return reply, err
}
